// Generated by CoffeeScript 1.3.3

/*
  Contains the main application logic.

  Author: Michael Mulich
  Copyright (c) 2012 Rice University

  This software is subject to the provisions of the GNU Lesser General
  Public License Version 2.1 (LGPL).  See LICENSE.txt for details.
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require(['jquery', 'lib/backbone', 'lib/mustache', '!lib/backbone.layoutmanager', '!lib/bootstrap', 'domReady!'], function($, Backbone, Mustache) {
    var JST, Router, app;
    console.log('Loaded: main');
    app = {
      root: '/',
      containerId: 'main',
      layouts: {},
      useLayout: function(name, type) {
        var layout;
        layout = this.layouts[type];
        if (layout && layout.options.template === name) {
          return layout;
        }
        if (layout) {
          layout.remove();
        }
        console.log("Initializing the '" + name + "' layout.");
        layout = new Backbone.Layout({
          template: name,
          id: 'layout',
          className: 'layout'
        });
        $("#" + this.containerId).empty().append(layout.el);
        layout.render();
        this.layouts[type] = layout;
        return this.layouts[type];
      }
    };
    JST = window.JavaScriptTemplateCache = window.JavaScriptTemplateCache || {};
    Backbone.LayoutManager.configure({
      prefix: '/static/templates/',
      fetch: function(path) {
        var done;
        path = "" + path + ".html";
        if (!JST[path]) {
          done = this.async();
          return $.ajax({
            url: path,
            async: false
          }).then(done);
        }
      },
      render: Mustache.to_html
    });
    Router = (function(_super) {

      __extends(Router, _super);

      function Router() {
        return Router.__super__.constructor.apply(this, arguments);
      }

      Router.prototype.routes = {
        '': 'index'
      };

      Router.prototype.index = function() {
        var authenticated, layout;
        authenticated = false;
        layout = void 0;
        if (authenticated) {
          console.log('User is authenticated');
          return app.useLayout('authenticated-layout', 'content');
        } else {
          console.log('User is NOT authenticated');
          return app.useLayout('non-authenticated-layout', 'content');
        }
      };

      return Router;

    })(Backbone.Router);
    app.router = new Router();
    return Backbone.history.start({
      pushState: true,
      root: app.root
    });
  });

}).call(this);
